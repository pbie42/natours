/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* Universal selector applies to every single thing on a page. We start with */
/* margin and padding at 0 because all browsers automatically add them. */

/* We also set box sizing to border box because it changes the box */
/* model so that the borders and the paddings are no long added to the total */
/* width and the total height that we specify for a box. */
* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

/* We always specify font family inside the body tag because we want font */
/* families to be inhereted and since the body is where we place all of our */
/* other tags inside it makes sense to start with the body tag for thing we */
/* want to have inhereted by all other tags. */

/* We add a padding of 30px which will wrap around the entire website, not */
/* because of inheritance, because padding is not passed down automatically */
/* like font information. This is completely a stylistic option. */
body {
	font-family: "Lato", sans-serif;
	font-weight: 400;
	font-size: 16px;
	line-height: 1.7;
	color: #777;
	padding: 30px;
}

/* We start by setting our header height to 95vh. What this means is that the */
/* header should always be 95% of the viewport height. If we put it at 100 it */
/* would always be at 100% of the viewport height but for our header here we */
/* only want it at 95% */

/* We then set the background image we want for our header and then we set */
/* the background size to cover which always tries to fill the element or */
/* viewport with the image. */

/* We set background position to top in order to ensure that no matter the */
/* size of the viewport the top of the image always stays at the top of it's */
/* container. */

/* Now we want to add a green filter over our background image and to do that */
/* we have to add another background-image. To specify gradients we always */
/* use background-image. We do this by putting a comma before our url linked */
/* image and adding linear-gradient. We then use the two colors we want. We */
/* can also specify "to right" as our first parameter and linear-gradient */
/* will know we want our gradient to go from left to right. We can also add */
/* bottom and this will say we want gradient from top left to bottom right. */

/* To get the header to display the shape we want we use the new css propery */
/* clip-path with the polygon function. This allows us to say what part/shape */
/* of the image we want to keep displayed. The polygon function allows us to */
/* pick coordinates for our shape. It starts at the top left and goes will go */
/* clockwise. */
.header {
	height: 95vh;
	background-image: linear-gradient(
		to right bottom,
		rgba(126, 213, 111, 0.8),
		rgba(40, 180, 131, 0.8)),
	url(../img/hero.jpg);
	background-size: cover;
	background-position: top;
	position: relative;
	clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

/* For our logo we will be putting in the top left corner of our header we */
/* are going to use absolute positioning. We are then going to use top and */
/* left properties to put the image exactly where we want it to be. Now where */
/* do the top and left measurements actually start? The reference for these */
/* properties comes from a parent element which has it's position set to */
/* relative. So need to set a position of relative on our header since that*/
/* is the logo-box's parent element. */

/* Now we want to specify the size of our image so we set the .logo height to */
/* 35px and the width we will scale accordingly so it's not necessary to */
/* specify it. */
.logo-box {
	position: absolute;
	top: 40px;
	left: 40px;
}

.logo {
	height: 35px;
}

/* This part comes after the comments below. We place text-box here to follow */
/* the natural flow of the html. Once again we are going to use absolute */
/* positioning to place the text-box where we want it, but this time the top */
/* and left will be a little different. We put them both at 50% which starts */
/* text-box at 50% of the parent div. So now we want to have the 50% mark of */
/* our text box to sit on the 50% mark of it's parent div. To do this we use */
/* the transform property with the translate function. And then we just tell */
/* the x and y positions to move -50%. This works because the translate x y */
/* here is not in relation to the parent. It tells only the current element */
/* to move 50% of its own size to the left and up. And last we change top to */
/* 40% simply for stylistic reasons. */
.text-box {
	position: absolute;
	top: 40%;
	left: 50%;
	transform: translate(-50%, -50%);
}

/* First thing we want to do is make the font color white. We set it in the */
/* heading-primary as it is the parent element. We also want the text to be */
/* uppercase so we use text-transform. */

/* Now we want to have both parts of the text to be one on top of the other. */
/* The best way to do this is to make them block elements as block elements */
/* occupy the entire width that they have available. And more importantly for */
/* this case they create line breaks after and before them. Span elements by */
/* default are inline elements so we must use the display property to tell */
/* the browser to display it as a block. */

/* Now we adjust the font size in the main and we have to explicitly add the */
/* font-weight of 400 because an h1 tag automatically adds a heigher weight. */
/* We do a similar styling for the sub. */
.heading-primary {
	color: #fff;
	text-transform: uppercase;
}

.heading-primary-main {
	display: block;
	font-size: 60px;
	font-weight: 400;
	letter-spacing: 35px;
}

.heading-primary-sub {
	display: block;
	font-size: 20px;
	font-weight: 700;
	letter-spacing: 17.4px;
}